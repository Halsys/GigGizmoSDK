/**
 * Created by corynull on 4/1/17.
 */
import RESTModel from "./RESTModel";
export default class User extends RESTModel {
    static ModelName: string;
    static Current: any;
    static Callbacks: Map<number, (user: User) => any>;
    static agreement: any;
    static EmailRegex: RegExp;
    password: string;
    confirmPassword: string;
    icon: string;
    active: boolean;
    admin: boolean;
    firstName: string;
    middleName: string;
    lastName: string;
    birthday: Date;
    country: string;
    bandManager: boolean;
    venueManager: boolean;
    betaFeatureUser: boolean;
    sendAnonymousReports: boolean;
    sendErrorReports: boolean;
    sendEmails: boolean;
    sendPromotions: boolean;
    useCookies: boolean;
    readonly fullName: string;
    email: string;
    readonly salt: string;
    readonly hash: string;
    facebook: string;
    twitter: string;
    description: string;
    emailVerified: boolean;
    readonly attempts: number;
    lastLoginIP: string;
    lastLogin: Date;
    canContact: boolean;
    canFind: boolean;
    options: any;
    static verifyEmail(id: string, secret: string): Promise<any>;
    static sendEmailVerification(): Promise<any>;
    static getAllConversations(): Promise<any[]>;
    static getAllNotifications(): Promise<any[]>;
    static getAllPosts(): Promise<any[]>;
    static getAllBands(): Promise<any[]>;
    static getAllVenues(): Promise<any[]>;
    static getAllGigs(): Promise<any[]>;
    static getAllUploads(): Promise<any[]>;
    static findFacebookPages(term: string): Promise<{}>;
    static search(q: string, modelName?: string, skip?: number, limit?: number): Promise<{}>;
    static findMany(criteria: object | null): Promise<any[]>;
    static findOne(criteria: object | null): Promise<any>;
    static onChange(callback: any): () => void;
    static setUser(data: object | null): Promise<any>;
    static getUser(force: boolean): Promise<any>;
    static findById(id: string): Promise<any>;
    static connectFacebook(): void;
    static facebookLogIn(): void;
    static payPalLogIn(): void;
    static userLogIn(email: string, password: string): Promise<any>;
    static userLogOut(): Promise<any>;
    static sendPasswordResetEmail(email: string): Promise<any>;
    static registerUser(userData: any): Promise<{}>;
    static NotifyAdminsOfError(): void;
    getIcon(): Promise<any>;
    getTwitterAccount(): Promise<any>;
    getFacebookAccount(): Promise<any>;
    validatePassword(maybePassword: string): Error;
    isValid(): boolean;
    valid(): boolean;
    save(): any;
    remove(): any;
}
